
'use server';
/**
 * @fileOverview AI flows for the Questions Creator feature.
 *
 * - generateQuestions - Generates questions based on document content.
 * - convertQuestionsToJson - Converts text-based questions to a structured JSON format.
 */

import { ai } from '@/ai/genkit';
import { z } from 'genkit';

// Schema for generating questions
const GenerateQuestionsInputSchema = z.object({
  prompt: z.string().describe('The user-defined prompt for generating questions.'),
  documentContent: z.string().describe('The text content extracted from the uploaded document.'),
  images: z.array(z.string()).describe("A list of images from the document, as data URIs. Expected format: 'data:<mimetype>;base64,<encoded_data>'."),
});
export type GenerateQuestionsInput = z.infer<typeof GenerateQuestionsInputSchema>;

// Schema for converting questions to JSON
const ConvertToJsonInputSchema = z.object({
  lectureName: z.string().describe("The name of the lecture, for example 'L1 Blood'."),
  questionsText: z.string().describe('The text of the questions generated by the first model, which includes MCQs and written cases.'),
});
export type ConvertToJsonInput = z.infer<typeof ConvertToJsonInputSchema>;


const isRetriableError = (error: any): boolean => {
    const errorMessage = error.message?.toLowerCase() || '';
    const retriableStrings = ['500', '503', '504', 'overloaded', 'timed out', 'service unavailable'];
    return retriableStrings.some(s => errorMessage.includes(s));
};

async function runWithRetry<T>(fn: () => Promise<T>): Promise<T> {
  const maxRetries = 3;
  let delay = 1000;

  for (let i = 0; i < maxRetries; i++) {
    try {
      return await fn();
    } catch (error: any) {
      if (i === maxRetries - 1 || !isRetriableError(error)) {
        console.error(`Final attempt failed or non-retriable error: ${error.message}`);
        throw error;
      }
      console.log(`Attempt ${i + 1} failed. Retrying in ${delay}ms...`);
      await new Promise(res => setTimeout(res, delay));
      delay *= 2;
    }
  }
  throw new Error('Operation failed after multiple retries.');
}


const generateQuestionsPrompt = ai.definePrompt({
    name: 'generateQuestionsPrompt',
    input: { schema: GenerateQuestionsInputSchema },
    prompt: `
        You are an expert at creating educational material from documents.
        Follow the user's instructions precisely to generate questions from the provided document content, which includes text and images.
        Base your questions on both the text and the visual information in the images.
        Use clear separators like '---' between different sections (e.g., between Level 1 MCQs and Level 2 MCQs).

        USER'S PROMPT:
        {{{prompt}}}

        DOCUMENT CONTENT (TEXT):
        {{{documentContent}}}

        DOCUMENT CONTENT (IMAGES):
        {{#each images}}
        {{media url=this}}
        {{/each}}
    `,
});


export async function generateQuestions(input: GenerateQuestionsInput): Promise<string> {
    return runWithRetry(async () => {
        const { text } = await generateQuestionsPrompt(input);
        return text;
    });
}


const convertToJsonPrompt = ai.definePrompt({
    name: 'convertToJsonPrompt',
    input: { schema: ConvertToJsonInputSchema },
    output: { format: 'json' },
    prompt: `
        You are a highly skilled text-to-JSON conversion engine. Your task is to convert the provided text of questions into a structured JSON object.
        The output MUST be a single, valid JSON object and nothing else.
        You MUST process the entire input text and include all questions provided.

        Follow this exact JSON structure:
        {
          "id": "A short, lowercase, URL-friendly ID derived from the lecture name (e.g., 'l1-blood').",
          "name": "The full lecture name, taken from the input.",
          "mcqs_level_1": [
            {
              "q": "The full question text, including the number.",
              "o": ["An array of strings, each representing one option."],
              "a": "The string of the correct option."
            }
          ],
          "mcqs_level_2": [
            // Same structure as mcqs_level_1
          ],
          "written": [
            {
              "case": "The full text of the clinical case description.",
              "subqs": [
                {
                  "q": "The sub-question text.",
                  "a": "The answer text for the sub-question. Preserve any HTML tags like <strong> if they exist in the source."
                }
              ]
            }
          ]
        }

        - The 'id' should be a unique, simplified version of the lecture name.
        - Split the MCQs into 'mcqs_level_1' and 'mcqs_level_2' based on the headings in the text.
        - For 'written' questions, group all sub-questions under their respective case.
        - Ensure all text, including questions, options, and answers, is captured exactly as it appears.
        - For each MCQ, the keys must be 'q', 'o', and 'a'.
        - For each written sub-question, the keys must be 'q' and 'a'.

        Lecture Name:
        {{{lectureName}}}

        Text to Convert:
        {{{questionsText}}}
    `,
});


export async function convertQuestionsToJson(input: ConvertToJsonInput): Promise<string> {
    return runWithRetry(async () => {
        const { output } = await convertToJsonPrompt(input);

        if (typeof output === 'object' && output !== null) {
            // The AI returned a valid JSON object. Stringify it with formatting.
            return JSON.stringify(output, null, 2);
        }

        if (typeof output === 'string') {
            // The AI might have returned a string that is valid JSON.
            // Let's try to parse and re-stringify it to ensure formatting.
            try {
                const parsed = JSON.parse(output);
                return JSON.stringify(parsed, null, 2);
            } catch (e) {
                // If it fails to parse, it means the AI returned a malformed string.
                // We throw an error to indicate failure.
                console.error("The AI returned a string that is not valid JSON.", output);
                throw new Error("Failed to convert content to a valid JSON structure. Please check the generated text and try again.");
            }
        }
        
        // If the output is neither an object nor a string, it's an unexpected format.
        const errorMsg = `The AI returned an unexpected data type that could not be processed. Raw output: ${JSON.stringify(output)}`;
        throw new Error(errorMsg);
    });
}

    